import asyncio
import json
import aiogram
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware

from config import *
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from database import *
from keybord import *
from smsactivate.api import SMSActivateAPI
from country import *
import requests
from CryptoPayAPI.CryptoPay import CryptoPay


cryptopay = CryptoPay(token=api_cryptobot)
sms = SMSActivateAPI(api_sms)

storage = MemoryStorage()
bot = Bot(token, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)


async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])

class CheksSub(BaseMiddleware):
    async def on_process_callback_query(self, callback: types.CallbackQuery, data: dict):
        db_admin()

        if op_chek() == 0:
            pass

        else:
            if await chec_shanel(channels=chanals, user=callback.from_user.id):
                pass
            else:
                await callback.message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã', reply_markup=show_canals())
                raise CancelHandler

    async def on_process_message(self, message: types.Message, data: dict):
        db_admin()

        if op_chek() == 0:
            pass
        else:
            if await chec_shanel(channels=chanals, user=message.from_user.id):
                pass
            else:
                await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã',
                                              reply_markup=show_canals())
                raise CancelHandler




async def RUB():
    data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    return round(float(data['Valute']['USD']['Value']), 2)


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def chec_shanel(channels, user):
    db_admin()

    if op_chek() == 0:
        pass
    for channal in channels:
        chat_member = await bot.get_chat_member(chat_id=channal[1], user_id=user)
        if chat_member['status'] == 'left':
            return False
    return True

@dp.callback_query_handler(text='stop_input', state='*')
async def stop_input(callback: types.CallbackQuery, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await callback.message.edit_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')





@dp.message_handler(commands=['Start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.chat.type == 'private':
        db_admin()
        db_start()
        db_url_ref()

        sym = message.text.split()[-1]
        run_update(sym)
        if op_chek() == 0:
            if chek_buttons() == 0:
                markup = kb
                with open('Halwa.jpg', 'rb') as photo:
                    await bot.send_photo(chat_id=message.from_user.id,
                                         photo=photo,
                                           caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                                '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup, parse_mode='HTML')
            else:
                markup = kbb
                with open('Halwa.jpg', 'rb') as photo:
                    await bot.send_photo(chat_id=message.from_user.id,
                                         photo=photo,
                                           caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                                '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup, parse_mode='HTML')
            if not user_exists(message.from_user.id):
                if message.from_user.username != None:
                    add_users(message.from_user.id)
                else:
                    add_users(message.from_user.id)
        else:
            if await chec_shanel(channels=chanals, user=message.from_user.id):
                with open('Halwa.jpg', 'rb') as photo:
                    await bot.send_photo(chat_id=message.from_user.id,
                                         photo=photo,
                                           caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                                '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb, parse_mode='HTML')
                if not user_exists(message.from_user.id):
                    if message.from_user.username != None:
                        add_users(message.from_user.id)
                    else:
                        add_users(message.from_user.id)

            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã',
                                       reply_markup=show_canals())

@dp.message_handler(text='üçπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def profile(message: types.Message):
    await message.answer('–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n'
                         'üìÉ –ü—Ä–∞–≤–∏–ª–∞ | https://telegra.ph/Pravila-magazina-09-20\n'
                         'üçπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è | https://t.me/quant_pzdc\n'
                         'üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞ | https://t.me/xalvahelp\n'
                         'üëπ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã | https://t.me/xalvaproject1', disable_web_page_preview=True)

@dp.message_handler(text='üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: types.Message):
    balance = chek_balance(message.from_user.id)
    await message.answer(f'üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {message.from_user.first_name}</b>\n\n'
                         f'üÜî <b>ID:</b> <code>{message.from_user.id}</code>\n'
                         f'üí∏  <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{float(balance[0])}</code> –†—É–±', parse_mode='HTML', reply_markup=ikb_money)


@dp.callback_query_handler(text='back')
async def pay(callback: types.CallbackQuery):
    await callback.message.edit_caption(
                           caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                           parse_mode='HTML')


@dp.callback_query_handler(text='go_pay')
async def pay(callback: types.CallbackQuery):

    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É', reply_markup=ikb_payment)

class User_pay(StatesGroup):
    amount = State()

@dp.callback_query_handler(text='go_crypto')
async def pay(callback: types.CallbackQuery):
    await callback.message.edit_text('–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                                     '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.1$', reply_markup=ikb_stop)
    await User_pay.amount.set()

@dp.message_handler(state=User_pay.amount)
async def fsm(message:types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text

    invoce = cryptopay.create_invoice(asset='USDT',
                                       amount=float(data['amount']),
                                       description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞')


    await message.answer(f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ {data["amount"]}$\n'
                         f'–ü–æ–ø–æ–ª–Ω—è—Ç—å –≤ USDT', reply_markup=oplata_kb(id=invoce.invoice_id, url=invoce.pay_url, price=invoce.amount))
    await state.finish()

@dp.callback_query_handler(text_startswith='check')
async def cheks(callback: types.CallbackQuery):
    id_pay = callback.data.split('|')[1]
    amount = callback.data.split('|')[2]
    invoce = cryptopay.get_invoices()
    kurs = await RUB()

    info_komsa = komsa_chek()[0]

    if info_komsa == None:
        info_komsa = add_komsa()





    res = int(kurs) * int(amount)
    komsa = float(res) / 100 * int(info_komsa)
    result = float(res) - float(komsa)



    for i in invoce:
        if str(i.invoice_id) == str(id_pay):
            if i.status != 'paid':
                await callback.answer('–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω', show_alert=True)
            else:
                add_balances(callback.from_user.id, result)
                add_all_balances(result)
                await callback.message.edit_text(f'–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {res} –†—É–±')
                await bot.send_message(ADMIN, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {res}—Ä')



@dp.callback_query_handler(text='done')
async def chek_subs(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if await chec_shanel(channels=chanals, user=message.from_user.id):
        if chek_buttons() == 0:
            markup = kb
            with open('Halwa.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=photo,
                                     caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                             '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup, parse_mode='HTML')
        else:
            markup = kbb
            with open('Halwa.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=photo,
                                     caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–º—Å –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n'
                                             '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup, parse_mode='HTML')

        if not user_exists(message.from_user.id):
            if message.from_user.username != None:
                add_users(message.from_user.id)
            else:
                add_users(message.from_user.id)

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã',
                               reply_markup=show_canals())




@dp.callback_query_handler(text_contains ='next_c', state='*')
async def next_country(call: types.CallbackQuery):

    i = call.data.split('|')[1]

    await call.message.edit_reply_markup(reply_markup=countryes(int(i)))

@dp.callback_query_handler(text_contains ='NEXT_man', state='*')
async def next_country(call: types.CallbackQuery):

    i = call.data.split('|')[1]

    await call.message.edit_reply_markup(reply_markup=countryes_smsman(int(i)))

@dp.message_handler(text='üì® –ü–æ–ª—É—á–∏—Ç—å –°–ú–°', state='*')
async def wh_serv(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', reply_markup=ikb_serv)

@dp.callback_query_handler(text='smsman')
async def sms_go(message: types.Message):

    with open('Halwa.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption='<b>üåé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>', reply_markup=countryes_smsman(0), parse_mode='HTML')



@dp.callback_query_handler(text='sms_activate')
async def sms_go(message: types.Message):

    with open('Halwa.jpg', 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id, photo=photo, caption='<b>üåé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>', reply_markup=countryes(0), parse_mode='HTML')





@dp.callback_query_handler(text_startswith='set_c|')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):
    strana = callback.data.split("|")[2]
    await callback.message.edit_caption(f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b>{strana}\n'
                                     f'üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:</b>', reply_markup=service(0, strana=strana), parse_mode='HTML')


@dp.callback_query_handler(text_startswith='SMS_man|')
async def set_coontri_smsman(callback: types.CallbackQuery, state:FSMContext):

    country_id = callback.data.split("|")[1]
    strana = callback.data.split("|")[2]


    await callback.message.edit_caption(f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b>{strana}\n'
                                     f'üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:</b>', reply_markup=service_smsman(0, strana=strana), parse_mode='HTML')

@dp.callback_query_handler(text_contains ='next_s', state='*')
async def next_country(call: types.CallbackQuery):

    text = call['message']['caption']
    text = ''.join(text)
    text = text.split('\n')[0]
    i = call.data.split('|')[1]
    text = text.split(':')[1]

    await call.message.edit_caption(caption=f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b>{text}\nüì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', reply_markup=service(int(i), strana=text), parse_mode='HTML')


@dp.callback_query_handler(text_contains ='next_Sm', state='*')
async def next_country(call: types.CallbackQuery):
    print(call.data)
    text = call['message']['caption']
    text = ''.join(text)
    text = text.split('\n')[0]
    i = call.data.split('|')[1]
    text = text.split(':')[1]

    await call.message.edit_caption(caption=f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b>{text}\nüì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å', reply_markup=service_smsman(int(i), strana=text), parse_mode='HTML')

#sms_man
@dp.callback_query_handler(text_startswith='set_Sm')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):

    strana = callback.data.split('|')[-1]
    service = callback.data.split('|')[2]
    country_id = 0
    application_id = callback.data.split('|')[1]
    for v, k in COUNRTY_SMSMAN.items():
        if k == strana:
            country_id = v

    res = requests.get(f'https://api.sms-man.ru/control/get-prices?token=${api_smsMan}&country=${int(country_id)}').json()
    try:
        info = res[str(country_id)][application_id]
    except KeyError:
        await callback.answer('–°–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ', show_alert=True)


    price = info['cost']
    count = info['count']
    if count == 0:
        await callback.answer('–ù–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', show_alert=True)


    price = float(price) + float(PRICE_SmsMan)

    await callback.message.edit_caption(f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b> {strana}\n'
                                        f'üì± <b>–°–µ—Ä–≤–∏—Å:</b> {service}\n\n'
                                        f'<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {float(price)} –†—É–±.\n'
                                        f'<b>üëå –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {count} —à—Ç\n'
                                        f'<b>‚åõ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> 20 –º–∏–Ω—É—Ç.\n\n'
                                        f'<b>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ üì≤ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥</b>',
                                        parse_mode='HTML',
                                        reply_markup=await service_number_smsman(country_id, application_id, price))

@dp.callback_query_handler(text_startswith='PhoneSMS|')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):

    country_id = callback.data.split('|')[1]
    application_id = callback.data.split('|')[2]
    price = callback.data.split('|')[3]
    number = requests.get(
        f'https://api.sms-man.ru/control/get-number?token=${api_smsMan}&country_id={int(country_id)}&application_id={int(application_id)}').json()
    try:
        if number['error_msg'] == 'No numbers, try again...':
            return  await callback.answer('–°–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä –Ω–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ', show_alert=True)
    except KeyError:
        pass
    id = int(number['request_id'])

    sms = requests.get(f'https://api.sms-man.ru/control/get-sms?token={api_smsMan}&request_id={int(id)}').json()
    print(sms)
    number = sms['number']

    await callback.message.edit_caption(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>–û–∂–∏–¥–∞–µ–º</code>\n'
                                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>\n\n'
                                        f'‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –º–æ–∂–Ω–æ <u>–î–û –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞</u>', parse_mode='HTML', reply_markup=sms_replay_smsman(id, price))

@dp.callback_query_handler(text_startswith='man_sms|')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.delete()
    id = callback.data.split('|')[1]
    price = callback.data.split('|')[2]
    sms = requests.get(f'https://api.sms-man.ru/control/get-sms?token=${api_smsMan}&request_id={int(id)}').json()
    print(sms)
    number = sms['number']
    try:
        if sms['sms_code'] != None:
            with open('Halwa.jpg', 'rb') as photo:
                await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                     caption=f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms["sms_code"]}</code>\n'
                                             f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>\n\n'
                                             f'‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –º–æ–∂–Ω–æ <u>–î–û –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞</u>', parse_mode='HTML',
                                     reply_markup=sms_replay_smsman(id, price))

    except KeyError:
        with open('Halwa.jpg', 'rb') as photo:
            await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                 caption=f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>–û–∂–∏–¥–∞–µ–º</code>\n'
                                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>\n\n'
                                         f'‚ö†Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –º–æ–∂–Ω–æ <u>–î–û –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞</u>', parse_mode='HTML',
                                 reply_markup=sms_replay_smsman(id, price))



#–£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
@dp.callback_query_handler(text_startswith='man_not')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):
    id = callback.data.split('|')[1]
    price = callback.data.split('|')[2]
    sms = requests.get(f'https://api.sms-man.ru/control/get-sms?token=${api_smsMan}&request_id={int(id)}').json()

    try:
        if sms['sms_code'] != None:
            minus_balance(callback.from_user.id, float(price))
            await callback.message.delete()
            await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!')

    except KeyError:
        res = requests.get(
            f'https://api.sms-man.ru/control/set-status?token=${api_smsMan}&request_id={int(id)}&status=reject').json()
        await callback.message.edit_caption(caption='<b>üåé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</b>',
                                            reply_markup=countryes_smsman(0), parse_mode='HTML')


#–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
@dp.callback_query_handler(text_startswith='man_nkay')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):
    id = callback.data.split('|')[1]
    price = callback.data.split('|')[2]
    res = requests.get(f'https://api.sms-man.ru/control/set-status?token=${api_smsMan}&request_id={int(id)}&status=ready')
    minus_balance(callback.from_user.id, float(price))


#sms_activate
@dp.callback_query_handler(text_startswith='set_s_|')
async def set_coontri(callback: types.CallbackQuery, state:FSMContext):
    try:
        strana = callback.data.split('|')[3]

        kod_service = callback.data.split('|')[1]
        servise_kod = []
        for u, p in name_service.items():
            if p == int(kod_service):
                servise_kod.append(u)
        name = []
        for n, z in full_name.items():
            if n == int(kod_service):
                name.append(z)
        name = ''.join(name)

        kod_strana = []
        for m, s in COUNRTY.items():
            if s == strana:
                kod_strana.append(m)



        info = sms.getPrices(servise_kod[0], kod_strana[0])
        for q, r in info.items():
            cost = f'{q}:{r[servise_kod[0]]["cost"]}'
            counter = f'{q}:{r[servise_kod[0]]["count"]}'
            print(info)
            price  = cost.split(':')[1]
            count = counter.split(":")[1]


            phone_number = sms.getNumberV2(servise_kod[0])

            pricec = phone_number['activationCost']
            number_phone = phone_number['phoneNumber']
            result = float(pricec) + float(PRICE)


            if count == '0':
                await callback.answer('–ù–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', show_alert=True)
            else:

                await callback.message.edit_caption(f'üåé <b>–°—Ç—Ä–∞–Ω–∞:</b> {strana}\n'
                                             f'üì± <b>–°–µ—Ä–≤–∏—Å:</b> {name}\n\n'
                                                 f'‚òé <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{number_phone}</code>\n'
                                                 f'<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {float(result)} –†—É–±.\n'
                                                 f'<b>üëå –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {count} —à—Ç\n'
                                                 f'<b>‚åõ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> 20 –º–∏–Ω—É—Ç.\n\n'
                                                 f'<b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≤–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ  üì≤ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥</b>' , parse_mode='HTML', reply_markup= await service_number(number_phone, phone_number['activationId'], int(result)))
    except Exception as e:
        print(e)
        await callback.answer('–ù–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', show_alert=True)


@dp.callback_query_handler(text_startswith='phone')
async def phone_go(callback:types.CallbackQuery):

    price = callback.data.split('|')[3]
    id = callback.data.split('|')[2]
    number = callback.data.split('|')[1]
    phone_number = sms.getActiveActivations()
    print(phone_number['activeActivations'])
    for i in range(len(phone_number)):
        if phone_number['activeActivations'][i]['phoneNumber'] == number:
            sms_code = phone_number['activeActivations'][i]['smsCode']
            await callback.message.edit_caption(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms_code}</code>\n'
                                             f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>', parse_mode='HTML', reply_markup=sms_replay(number, id, price))
        else:
            return await callback.answer('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', show_alert=True)


@dp.callback_query_handler(text_startswith='go_sms')
async def phone_go(callback:types.CallbackQuery):
    try:

        await callback.message.delete()
        price = callback.data.split('|')[3]
        id = callback.data.split('|')[2]
        number = callback.data.split('|')[1]
        phone_number = sms.getActiveActivations()
        for i in range(len(phone_number)):
            if phone_number['activeActivations'][i]['phoneNumber'] == number:
                sms_code = phone_number['activeActivations'][i]['smsCode']
                if sms_code == None:
                    await callback.message.answer(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms_code}</code>\n\n'
                                                  f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>', parse_mode='HTML', reply_markup=sms_replay(number, id, price))
                else:
                    await callback.message.answer(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms_code[0]}</code>', parse_mode='HTML', reply_markup=sms_replay(number, id, price))
    except Exception:
        await callback.message.delete()
        price = callback.data.split('|')[3]
        number = callback.data.split('|')[1]
        id = callback.data.split('|')[2]
        phone_number = sms.getActiveActivations()
        for i in range(len(phone_number)):
            if phone_number['activeActivations'][0]['phoneNumber'] == number:
                sms_code = phone_number['activeActivations'][0]['smsCode']
                if sms_code == None:
                    await callback.message.answer(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms_code}</code>\n\n'
                                                  f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number}</code>', parse_mode='HTML',
                                                  reply_markup=sms_replay(number, id))
                else:
                    await callback.message.answer(f'–í–∞—à —Å–º—Å –∫–æ–¥: <code>{sms_code[0]}</code>', parse_mode='HTML', reply_markup=sms_replay(number, id, price))

@dp.callback_query_handler(text_startswith='okay')
async def phone_go(callback:types.CallbackQuery):
    price = callback.data.split('|')[3]
    number = callback.data.split('|')[1]
    id = callback.data.split('|')[2]
    status = sms.setStatus(id=id, forward=number, status=8)
    if status == 'EARLY_CANCEL_DENIED':
        await callback.answer('–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –ø–µ—Ä–≤—ã–µ 2 –º–∏–Ω—É—Ç—ã', show_alert=True)
    else:
        res = await callback.message.edit_text('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        await asyncio.sleep(30)
        await res.delete()

@dp.callback_query_handler(text_startswith='nkay')
async def phone_go(callback:types.CallbackQuery):
    price = callback.data.split('|')[3]
    number = callback.data.split('|')[1]
    id = callback.data.split('|')[2]
    status = sms.setStatus(id=id, forward=number, status=6)
    if status == 'ACCESS_ACTIVATION':
        await callback.message.edit_text('–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
        minus_balance(callback.from_user.id, int(price))

@dp.callback_query_handler(text_startswith='not')
async def phone_go(callback:types.CallbackQuery):
    price = callback.data.split('|')[3]
    number = callback.data.split('|')[1]
    id = callback.data.split('|')[2]
    status = sms.setStatus(id=id, forward=number, status=8)
    if status == 'ACCESS_CANCEL':
        await callback.message.edit_text('–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@dp.message_handler(commands=['admin'])
async def cmd_adm(message: types.Message):
    if message.from_user.id == ADMIN:
        await message.answer('–í—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=kb_admin)


@dp.message_handler(text='–û–±—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        balance = all_balance_chek()
        await message.answer(f'–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ –Ω–∞ {balance} –†—É–±–ª–µ–π')

@dp.message_handler(text='–í–ö–õ (–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å)')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        on_buttons()
        await message.answer('–ö–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã')

@dp.message_handler(text='–í–´–ö–õ (–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å)')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        off_buttons()
        await message.answer('–ö–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã')

@dp.message_handler(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        info = url_chek()

        for i in range(len(info)):
            url = info[i][0]
            count = info[i][1]
            await message.answer(f'<code>{url}</code> - {count} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤')

@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        url_delete()
        await message.answer('–í—Å–µ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')

class URL_CREATE(StatesGroup):
    url = State()

@dp.message_handler(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        db_url_ref()
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ start: \n'
                             f'http://t.me/{NICNAME_BOT}?start=', reply_markup=ikb_stop)
        await URL_CREATE.url.set()

@dp.message_handler(state=URL_CREATE.url)
async def create_url(message: types.Message, state:FSMContext):
    text = message.text
    await message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞: <code>http://t.me/{NICNAME_BOT}?start={text}</code>')
    add_url(f'http://t.me/{NICNAME_BOT}?start={text}', text)
    await state.finish()



@dp.message_handler(text='–í–∫–ª—é—á–∏—Ç—å –û–ü')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        on_subs()
        await message.answer('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞')

@dp.message_handler(text='üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')
async def tip_text(message: types.Message):
    res = select_buton2()
    if res[-1] == 'no':
        if res[0] == 'text':
            await message.answer(f'{res[1]}')
        if res[0] == 'photo':
            await bot.send_photo(chat_id=message.from_user.id, photo=res[-1], caption=res[1])
        if res[0] == 'video':
            await bot.send_video(chat_id=message.from_user.id, video=res[-1], caption=res[1])
        if res[0] == 'animation':
            await bot.send_animation(chat_id=message.from_user.id, animation=res[-1], caption=res[1])
    else:
        buton = res[-1]
        url = buton.split('|')[1].strip()
        name = buton.split('|')[0]
        if res[0] == 'text':
            await message.answer(f'{res[1]}', reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'photo':
            await bot.send_photo(chat_id=message.from_user.id, photo=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'video':
            await bot.send_video(chat_id=message.from_user.id, video=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'animation':
            await bot.send_animation(chat_id=message.from_user.id, animation=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))


@dp.message_handler(text='1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
async def tip_text(message: types.Message):
    res = select_buton()

    if res[-1] == 'no':
        if res[0] == 'text':
            await message.answer(f'{res[1]}')
        if res[0] == 'photo':
            await bot.send_photo(chat_id=message.from_user.id, photo=res[-1], caption=res[1])
        if res[0] == 'video':
            await bot.send_video(chat_id=message.from_user.id, video=res[-1], caption=res[1])
        if res[0] == 'animation':
            await bot.send_animation(chat_id=message.from_user.id, animation=res[-1], caption=res[1])
    else:
        buton = res[-1]
        url = buton.split('|')[1].strip()
        name = buton.split('|')[0]

        if res[0] == 'text':
            await message.answer(f'{res[1]}', reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'photo':
            await bot.send_photo(chat_id=message.from_user.id, photo=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'video':
            await bot.send_video(chat_id=message.from_user.id, video=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))
        if res[0] == 'animation':
            await bot.send_animation(chat_id=message.from_user.id, animation=res[-2], caption=res[1], reply_markup=kb_rassilka(buton=name, url=url))

@dp.message_handler(text='–í—ã–∫–ª—é—á–∏—Ç—å –û–ü')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        off_subs()
        await message.answer('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞')

@dp.message_handler(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        res = all_users()
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(res)}')

@dp.message_handler(text='–í—ã—Ö–æ–¥')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:

        if chek_buttons() == 0:
            markup = kb
            await message.answer('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=markup)
        else:
            markup = kbb
            await message.answer('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=markup)

class AdminKomsa(StatesGroup):
    komsa = State()

@dp.message_handler(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        info_komsa = komsa_chek()[0]
        await message.answer(f'–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {info_komsa}$\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é (–¶–µ–ª–æ–µ —á–∏—Å–ª–æ)', reply_markup=ikb_stop)
        await AdminKomsa.komsa.set()

@dp.message_handler(state=AdminKomsa.komsa)
async def komsas(message: types.Message, state:FSMContext):
    komsa = int(message.text)
    komsa_update(komsa)
    await message.answer('–ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')
    await state.finish()


class AdminPhotoText(StatesGroup):
    text = State()
    photo = State()

@dp.message_handler(text='–†–∞—Å—Å—ã–ª–∫–∞')
async def ras(message: types.Message):
    if message.from_user.id == ADMIN:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ikb_tip_rassilka)

@dp.callback_query_handler(text='photo')
async def tip_text(callback: types.CallbackQuery):
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ikb_stop)
    await AdminPhotoText.text.set()

@dp.message_handler(state=AdminPhotoText.text)
async def rasl_text(message: types.Message, state:FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=ikb_stop)
    await AdminPhotoText.next()

@dp.message_handler(content_types=['photo'], state=AdminPhotoText.photo)
async def rasl_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    user = all_users()

    count = 0
    try:
        for i in range(len(user)):

            try:

                await bot.send_photo(chat_id=user[i][0], photo=data['photo'], caption=data['text'], parse_mode='HTML')
                count += 1
            except Exception as e:
                print(e)
                continue
        await bot.send_message(ADMIN, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n'
                                  f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: {count} —á–µ–ª–æ–≤–µ–∫')
        await state.finish()
    except Exception as e:
        await state.finish()
        print(e)

class AdminText(StatesGroup):
    text = State()

@dp.callback_query_handler(text='Texts')
async def tip_text(callback: types.CallbackQuery):
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=ikb_stop)
    await AdminText.text.set()

@dp.message_handler(state=AdminText.text)
async def rasl_text(message: types.Message, state:FSMContext):

    text = message.text
    user = all_users()
    count = 0
    try:
        for i in range(len(user)):
            try:
                await bot.send_message(user[i][0], f'{text}', parse_mode='HTML')
                count += 1
            except Exception:
                continue

        await bot.send_message(ADMIN, '‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n'
                                  f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: {count} —á–µ–ª–æ–≤–µ–∫')
        await state.finish()
    except Exception as e:
        await state.finish()
        print(e)

@dp.callback_query_handler(text='back_tip')
async def tip_text(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=ikb_buttons)


@dp.message_handler(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å)')
async def tip_text(message: types.Message):
    if message.from_user.id == ADMIN:
        db_new_buton()
        db_new_buton2()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=ikb_buttons)

@dp.callback_query_handler(text_startswith='BUT')
async def but(callback: types.CallbackQuery):
    butons = callback.data.split('|')[1]
    await callback.message.edit_text(f'–ö–Ω–æ–ø–∫–∞ <b>{butons}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', reply_markup=ikb_tips_buton(butons))

class TEXT(StatesGroup):
    text = State()


@dp.callback_query_handler(text_startswith='Text')
async def but(callback: types.CallbackQuery, state:FSMContext):
    butons = callback.data.split('|')[1]
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=ikb_stop)
    await TEXT.text.set()
    await state.update_data(butons=butons)


@dp.message_handler(state=TEXT.text)
async def txt(message:types.Message, state:FSMContext):
    text = message.text
    data = await state.get_data()
    if data['butons'] == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_text('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'text', text, 0)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É'))
    else:
        add_text2('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'text', text, 0)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))

class PHOTO(StatesGroup):
    photo = State()

@dp.callback_query_handler(text_startswith='Photo')
async def but(callback: types.CallbackQuery, state:FSMContext):
    butons = callback.data.split('|')[1]
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=ikb_stop)
    await PHOTO.photo.set()
    await state.update_data(butons=butons)


@dp.message_handler(content_types=['photo'], state=PHOTO.photo)
async def txt(message:types.Message, state:FSMContext):
    photo = message.photo[0].file_id
    text = message.caption
    data = await state.get_data()
    if data['butons'] == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_text('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'photo', text, photo)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É'))
        await state.finish()

    else:
        add_text2('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'photo', text, photo)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))


class ANIMATION(StatesGroup):
    text = State()
    animation = State()

@dp.callback_query_handler(text_startswith='Gif')
async def but(callback: types.CallbackQuery, state:FSMContext):
    butons = callback.data.split('|')[1]
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=ikb_stop)
    await ANIMATION.text.set()
    await state.update_data(butons=butons)

@dp.message_handler(state=ANIMATION.text)
async def txt(message:types.Message, state:FSMContext):
    await state.update_data(text=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF')
    await ANIMATION.next()

@dp.message_handler(content_types=['animation'], state=ANIMATION.animation)
async def txt(message:types.Message, state:FSMContext):

    gif = message.animation['file_id']

    data = await state.get_data()
    if data['butons'] == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_text('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'animation', data['text'], gif)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É'))
    else:
        add_text2('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'animation', data['text'], gif)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))



class VIDEO(StatesGroup):
    video = State()

@dp.callback_query_handler(text_startswith='Video')
async def but(callback: types.CallbackQuery, state:FSMContext):
    butons = callback.data.split('|')[1]
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=ikb_stop)
    await VIDEO.video.set()
    await state.update_data(butons=butons)


@dp.message_handler(content_types=['video'], state=VIDEO.video)
async def txt(message:types.Message, state:FSMContext):

    video = message.video['file_id']
    text = message.caption
    data = await state.get_data()
    if data['butons'] == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_text('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'video', text, video)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É'))
    else:
        add_text2('1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É', 'video', text, video)
        await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        await state.finish()
        await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?', reply_markup=add_but('üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'))



class BUTTON(StatesGroup):
    keybord = State()

@dp.callback_query_handler(text_startswith='YES')
async def yes(callback:types.CallbackQuery, state:FSMContext):
    but = callback.data.split('|')[1]
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ URL\n\n'
                         '–ü—Ä–∏–º–µ—Ä: –†–µ–∫–ª–∞–º–∞|.https://www.youtube')
    await BUTTON.keybord.set()
    data = await state.update_data(butons=but)

@dp.message_handler( state=BUTTON.keybord)
async def txt(message:types.Message, state:FSMContext):
    data = await state.get_data()

    if data['butons'] == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_keybord(message.text)
        await message.answer('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await state.finish()
    else:
        add_keybord2(message.text)
        await message.answer('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await state.finish()

@dp.callback_query_handler(text_startswith='NO')
async def yes(callback:types.CallbackQuery, state:FSMContext):
    but = callback.data.split('|')[1]
    if but == '1$ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É':
        add_keybord('no')
    else:
        add_keybord2('no')
    await callback.message.delete()

async def on_startup(_):
    await set_default_commands(dp)
    print('Bot started')


if __name__ == '__main__':
    dp.middleware.setup(CheksSub())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)



